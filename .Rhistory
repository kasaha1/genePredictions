Genenames <- trainingGenenames %>% t %>% as.vector()
## transform 'class name' to numeric vector
levOfClass <- trainingClass %>% t %>% as.factor() %>% levels()
levOfClass_numeric <- levOfClass %>% as.factor() %>% as.numeric()
table.levels <- cbind(levOfClass,levOfClass_numeric) %>% as.data.frame()
trainingClass.m <- left_join(trainingClass,table.levels, by=c("class"="levOfClass"))
trainingY <- trainingClass.m$levOfClass_numeric %>% t %>% as.character() %>% as.numeric()
## merging dataset for training
mydata <- list(x=trainingX, y=trainingY, genenames = Genenames, geneid = c(1:length(Genenames)) )
## analysis start : Training
model <- pamr.train(mydata)
print(model)
## analysis start : CrossValidation
model.cv <- pamr.cv(fit = model, data = mydata)
print(model.cv)
pdf("Output/CrossValidation_Plot.pdf",width = 15, height = 10,pointsize = 12)
pamr.plotcv(model.cv)
dev.off()
## analysis start : Threshold 1.628
Delta <- 1.628
pdf("Output/CrossValidation_Plot_1.628.pdf",width = 15, height = 10,pointsize = 12)
pamr.plotcvprob(model, mydata,threshold = Delta)
dev.off()
## analysis start : centroid
centroid_gene <- pamr.listgenes(model, mydata, Delta, genenames = TRUE) %>% as.data.frame
centroid_gene$id <- centroid_gene$id %>% as.numeric()
centroid_gene <- centroid_gene %>% arrange(id)
colnames(centroid_gene)[c(3:(2+length(levOfClass)))] <- levOfClass
write_delim(centroid_gene,file = "Output/centroid_ByGenes.txt",delim = "\t")
## analysis start : prediction
## testDataset preparing
testDataset <- fread("Dataset/testDataset.txt") %>% as.data.frame() %>% kasa.duplicationRemovalBySD()
colnames(testDataset)[1] <- c("genenames")
testDataset.modi <- left_join(x=trainingGenenames,y=testDataset,by=c("genenames"))
install.packages('rsconnect')
rsconnect::setAccountInfo(name='kasaha1', token='6F76A57070059AF3831C684ACAEFAC4B', secret='i+R1hIDZEpk3HHokrrniVGLEH/fQ3+unnK3lfC/Y')
shiny::runApp('E:/GoogleDriveKorea/test/kk')
rsconnect::deployApp('E:/GoogleDriveKorea/test/kk/app.R')
rsconnect::deployApp('E:/GoogleDriveKorea/test/kk')
rsconnect::deployApp('E:/GoogleDriveKorea/test/kk12')
shiny::runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
headerPanel("Example eventReactive"),
mainPanel(
# input field
textInput("user_text", label = "Enter some text:", placeholder = "Please enter some text."),
# submit button
actionButton("submit", label = "Submit"),
# display text output
textOutput("text"))
)
server <- function(input, output) {
# reactive expression
text_reactive <- eventReactive( input$submit, {
input$user_text
})
# text output
output$text <- renderText({
text_reactive()
})
}
shinyApp(ui = ui, server = server)
print("koko")
library(shiny)
ui <- fluidPage(
headerPanel("Example eventReactive"),
mainPanel(
# input field
textInput("user_text", label = "Enter some text:", placeholder = "Please enter some text."),
# submit button
actionButton("submit", label = "Submit"),
# display text output
textOutput("text"))
)
server <- function(input, output) {
# reactive expression
text_reactive <- eventReactive( input$submit, {
print("koko")
# input$user_text
})
# text output
output$text <- renderText({
text_reactive()
})
}
shinyApp(ui = ui, server = server)
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
runApp('E:/GoogleDriveKorea/test/PICS100')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
k <- c("kokok")
output$value <- renderPrint(data)
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
library(shiny)
ui <- fluidPage(
fluidRow(column(6,div(checkboxGroupInput("test1", "Testing buttons",
choices=c("A","B","C"),
selected=c("A","B","C"))))),
hr(),
actionButton("gobutton","Start"),
dataTableOutput("summary_table")
)
server <- function(input,output){
data <- eventReactive(input$gobutton,{
if(is.null(input$test1)){
return()
}
df <- data.frame(col1=input$test1,col2=seq(1,length(input$test1),1))
df
})
output$summary_table <- renderDataTable({
data()
})
}
shinyApp(ui=ui, server=server)
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
runApp('E:/GoogleDriveKorea/test/exam')
getwd()
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","pathfindR")
library(kasaBasicFunctions)
kasa.instPak (packages)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","pathfindR")
kasa.instPak (packages)
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
library(kasaBasicFunctions)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
# packages_bioc <- c()
# kasa.instPak_bioc (packages_bioc)
#-----------------------------
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
library(kasaBasicFunctions)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
# packages_bioc <- c()
# kasa.instPak_bioc (packages_bioc)
#-----------------------------
library(survival)
library(survminer)
# clear memory
# rm(list = ls()[!(ls() %in% c("variable","variable","variable"))])
rm(list = ls())
gc()
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
library(kasaBasicFunctions)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
# packages_bioc <- c()
# kasa.instPak_bioc (packages_bioc)
#-----------------------------
library(kasaBasicFunctions)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table")
kasa.instPak (packages)
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
library(kasaBasicFunctions)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table")
kasa.instPak (packages)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","shiny")
kasa.instPak (packages)
library(survival)
library(survminer)
library(survival)
library(survminer)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","shiny","survminer")
kasa.instPak (packages)
library(survminer)
# fit #
fit <- survfit(Surv(time_var,status_var==1) ~ strata(def:1), data = raw.data)
data(colon)
data(Colon)
data()
data(lung)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","shiny","survminer","moonBook")
kasa.instPak (packages)
data(colon)
data(Colon)
data()
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp('E:/GoogleDriveKorea/test/t')
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
library(kasaBasicFunctions)
devtools::install_github("Sage-Bionetworks/CMSclassifier")
library(CMSclassifier)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","HGNChelper")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
packages_bioc <- c("aliases2entrez","limma","impute")
kasa.instPak_bioc (packages_bioc)
#-----------------------------
HGNC <- update_symbols()
library(kasaBasicFunctions)
library(CMSclassifier)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","HGNChelper")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
packages_bioc <- c("aliases2entrez","limma","impute")
kasa.instPak_bioc (packages_bioc)
#-----------------------------
HGNC <- update_symbols()
GeneName <- fread("rawData/CMS_reference_transcriptome.txt") %>% as.data.frame()
getwd()
setwd("GitHub/genePredictions/")
GeneName <- fread("rawData/CMS_reference_transcriptome.txt") %>% as.data.frame()
GeneName$GeneID <- GeneName$GeneID %>% as.character()
GeneName.list <- GeneName$GeneID %>% t() %>% as.vector()
inputdata <- fread("rawData/testDataset.txt") %>% as.data.frame()
GeneList.rnaseq <- inputdata$sample %>% t() %>% as.vector()
GeneList.rnaseq <- inputdata[1] %>% t() %>% as.vector()
ids <- convert_symbols(GeneList.rnaseq, HGNC,c=8)
View(ids)
inputdata_t <- inputdata
inputdata_t[1] <- ids$entrezID %>% as.character()
View(inputdata_t)
View(inputdata)
View(ids)
View(ids)
raw.data <- inputdata_t %>% filter(.data[1] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(.data[.1] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(inputdata_t[1] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(inputdata_t[1] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(Symbol %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(.data[1] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(.data[[1]] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(.data[,1] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(.data[[1]] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
raw.data <- inputdata_t %>% filter(.data[['1']] %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
colnames(inputdata)[1] <- "genes"
GeneList.rnaseq <- inputdata$genes %>% t() %>% as.vector()
ids <- convert_symbols(GeneList.rnaseq, HGNC,c=8) # Converts Hugo to enterzID
inputdata_t <- inputdata
inputdata_t <- inputdata
inputdata_t$genes <- ids$entrezID %>% as.character()
raw.data <- inputdata_t %>% filter(genes %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
match <- inner_join(x = GeneName,y = raw.data, by=c("GeneID"="genes"))
View(match)
datasetForCMS <- match[,-2] %>% kasa.transposeMatrix()
rownames(datasetForCMS) <- datasetForCMS[,1]
data.CMS <- datasetForCMS[,-1]
View(data.CMS)
Rfcms <- CMSclassifier::classifyCMS(t(data),method="RF")[[3]]
Rfcms <- CMSclassifier::classifyCMS(t(data.CMS),method="RF")[[3]]
SScms <- CMSclassifier::classifyCMS(t(data.CMS),method="SSP")[[3]]
result_SSCMS <- rownames_to_column(SScms)
View(result_SSCMS)
result_RfCMS <- Rfcms %>% rownames_to_column()
View(result_RfCMS)
View(Rfcms)
View(SScms)
result_SSCMS <- SScms %>% rownames_to_column()
result_RfCMS <- Rfcms %>% rownames_to_column()
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
library(kasaBasicFunctions)
devtools::install_github("Sage-Bionetworks/CMSclassifier")
library(CMSclassifier)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("tidyverse", "data.table","HGNChelper")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
packages_bioc <- c("aliases2entrez","limma","impute")
kasa.instPak_bioc (packages_bioc)
#-----------------------------
HGNC <- update_symbols()
GeneName <- fread("rawData/CMS_reference_transcriptome.txt") %>% as.data.frame()
GeneName$GeneID <- GeneName$GeneID %>% as.character()
GeneName.list <- GeneName$GeneID %>% t() %>% as.vector()
inputdata <- fread("rawData/testDataset.txt") %>% as.data.frame()
colnames(inputdata)[1] <- "genes"
GeneList.rnaseq <- inputdata$genes %>% t() %>% as.vector()
ids <- convert_symbols(GeneList.rnaseq, HGNC,c=8) # Converts Hugo to enterzID
inputdata_t <- inputdata
inputdata_t$genes <- ids$entrezID %>% as.character()
raw.data <- inputdata_t %>% filter(genes %in% GeneName.list) %>% kasa.duplicationRemovalBySD()
match <- inner_join(x = GeneName,y = raw.data, by=c("GeneID"="genes"))
datasetForCMS <- match[,-2] %>% kasa.transposeMatrix()
rownames(datasetForCMS) <- datasetForCMS[,1]
data.CMS <- datasetForCMS[,-1]
Rfcms <- CMSclassifier::classifyCMS(t(data.CMS),method="RF")[[3]]
SScms <- CMSclassifier::classifyCMS(t(data.CMS),method="SSP")[[3]]
result_SSCMS <- SScms %>% rownames_to_column()
result_RfCMS <- Rfcms %>% rownames_to_column()
write_delim(result_SSCMS,file = "result_SSCMS.txt",delim = "\t")
write_delim(result_RfCMS,file = "result_RfCMS.txt",delim = "\t")
write_delim(result_SSCMS,file = paste0(dirOut,"/result_SSCMS.txt"),delim = "\t")
dirOut <- "Output_CMS"
if(!file.exists(dirOut)){dir.create(dirOut)}
write_delim(result_SSCMS,file = paste0(dirOut,"/result_SSCMS.txt"),delim = "\t")
write_delim(result_RfCMS,file = paste0(dirOut,"/result_RfCMS.txt"),delim = "\t")
